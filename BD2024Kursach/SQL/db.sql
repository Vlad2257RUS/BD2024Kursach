-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
--advertisingactivitiesofTVchannels
--BEGIN;

-- Удаление всех объектов базы данных
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

CREATE OR REPLACE FUNCTION start_sql(path_to_file TEXT)
RETURNS VOID AS $$
DECLARE
    sql_script TEXT;
BEGIN
    -- Читаем содержимое файла
	sql_script := pg_read_file(path_to_file);
    -- Выполняем SQL скрипт
	EXECUTE sql_script;
END $$ LANGUAGE plpgsql;

-- DROP TABLE IF EXISTS public.city,
-- public.type_of_ownership,
-- public.channel,
-- public.employee,
-- public.customer,
-- public.time_type,
-- public.possible_orders,
-- public.orders,
-- public.role,
-- CASCADE;

CREATE TABLE IF NOT EXISTS public.city
(
    id_city bigserial PRIMARY KEY,
    city text NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS public.role
(
    id_role bigserial PRIMARY KEY,
    role text NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS public.type_of_ownership
(
    id_type_of_ownership serial PRIMARY KEY,
    type_of_ownership text NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS public.employee 
(
    login text PRIMARY KEY,
    employee text NOT NULL,
    data JSONB
);

CREATE TABLE IF NOT EXISTS public.channel
(
    id_channel bigserial PRIMARY KEY,
    channel_name text NOT NULL,
    fid_city bigint NOT NULL,
    fid_type_of_ownership integer NOT NULL,
    start_work time without time zone NOT NULL, --CHECK (start_work < end_work ),
    end_work time without time zone NOT NULL,
    fid_employee text NOT NULL DEFAULT CURRENT_USER 
);

CREATE TABLE IF NOT EXISTS public.time_type
(
    id_time_type serial PRIMARY KEY,
    time_type text NOT NULL,
    number_of_minutes bigint NOT NULL,
    cost_per_minute bigint NOT NULL
       
);

-- Создаем домен для номера телефона
CREATE OR REPLACE DOMAIN phone_domain AS bigint
CHECK (VALUE >= 1 AND VALUE <= 99999999999);

CREATE TABLE IF NOT EXISTS public.customer 
(
    id_customer bigserial PRIMARY KEY,
    name_customer text NOT NULL,
    fid_city bigint NOT NULL,
    phone_number phone_domain NOT NULL UNIQUE, 
    address text 
);

CREATE TABLE IF NOT EXISTS public.possible_orders
(
    id_possible_orders bigserial PRIMARY KEY,
    number_possible_orders bigint NOT NULL UNIQUE,
    fid_channel bigint NOT NULL,
    fid_time_type bigint NOT NULL
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id_order bigserial PRIMARY KEY,
    fid_customer bigint NOT NULL,
    fid_channel bigint NOT NULL,
    order_date date NOT NULL,
    fid_time_type bigint NOT NULL,
    duration integer NOT NULL,
    fid_possible_order bigint NOT NULL,
    number_order bigint NOT NULL UNIQUE
);


ALTER TABLE IF EXISTS public.channel
    ADD CONSTRAINT fid_city FOREIGN KEY (fid_city)
    REFERENCES public.city (id_city) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT fid_type_of_ownership FOREIGN KEY (fid_type_of_ownership)
    REFERENCES public.types_of_ownership (id_type_of_ownership) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT unique_fid_employee UNIQUE (fid_employee),
    ADD CONSTRAINT fid_employee FOREIGN KEY (fid_employee) --Связь 1 к 1
    REFERENCES public.employee (login) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.customer
    ADD CONSTRAINT fid_city FOREIGN KEY (fid_city)
    REFERENCES public.city (id_city) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.possible_orders
    ADD CONSTRAINT fid_channel FOREIGN KEY (fid_channel)
    REFERENCES public.channel (id_channel) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT fid_time_type FOREIGN KEY (fid_time_type)
    REFERENCES public.time_type (id_time_type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fid_customer FOREIGN KEY (fid_customer)
    REFERENCES public.customer (id_customer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT fid_channel FOREIGN KEY (fid_channel)
    REFERENCES public.channel (id_channel) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT fid_time_type FOREIGN KEY (fid_time_type)
    REFERENCES public.time_type (id_time_type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT fid_possible_order FOREIGN KEY (fid_possible_order)
    REFERENCES public.possible_orders (id_possible_orders) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

--Запускаем остальные SQL скрипты.
DO $$
DECLARE
    path TEXT := 'D:\\PostgreSQL_Scripts\\';
    
BEGIN
    --PERFORM start_sql(path || 'views.sql');
    PERFORM start_sql(path || 'roles.sql');
    PERFORM start_sql(path || 'triggers.sql');
    PERFORM start_sql(path || 'functions.sql');
    PERFORM start_sql(path || 'rls.sql');
END $$;

--END;